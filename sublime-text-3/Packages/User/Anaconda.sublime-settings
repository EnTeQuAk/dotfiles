
{
    "complete_parameters": true,
    "complete_all_parameters": false,

    "display_signatures": true,

    "auto_formatting": false,

    "aggressive": 2,

    /*
        Do not fix the errors listed here:
    */
    "autoformat_ignore":
    [
    ],

    /*
        Fix only the errors listed here:
    */
    "autoformat_select":
    [
    ],

    /*
        Set the thresshold limit for McCabe complexity checker
    */
    "mccabe_threshold": 7,

    /*
        Set is a false to disable Anaconda Linting totally
    */
    "anaconda_linting": true,

    /*
        Sets the linting behaviour for anaconda:

        "always" - Linting works always even while you are writting (in the background)
        "load-save" - Linting works in file load and save only
        "save-only" - Linting works in file save only
    */
    "anaconda_linting_behaviour": "always",

    /*
        The minimum delay in seconds (fractional seconds are okay) before
        a linter is run when the "sublimelinter" setting is true. This allows
        you to have background linting active, but defer the actual linting
        until you are idle. When this value is greater than the built in linting delay,
        errors are erased when the file is modified, since the assumption is
        you don't want to see errors while you type.
    */
    "anaconda_linter_delay": 0.5,

    // If true, anaconda draws gutter marks on line with errors
    "anaconda_gutter_marks": true,

    /*

        If anaconda_gutter_marks is true, this determines what theme is used.
        Theme 'basic' only adds dots and circles to gutter.

        Other available themes are 'alpha', 'bright', 'dark', 'hard' and
        'simple'. To see icons that will be used for each theme check
        gutter_icon_themes folder in Anaconda package.
    */
    "anaconda_gutter_theme": "basic",

    /*
        If 'outline' (default) anaconda will outline error lines
        If 'fill' anconda will fill the lines
        If 'none' anaconda will not draw anything on error lines
    */
    "anaconda_linter_mark_style": "outline",

    /*
        If anaconda_linter_mark_style is set to none and this is set to false,
        anaconda will not underline errors

        If anaconda_linter_mark_style is set to anything else, this option is
        ignored
    */
    "anaconda_linter_underlines": true,

    /*
        Use PyLint instead of PyFlakes and PEP-8

        **** WARNING ****

        - If you set this value as true, PyFlakes and pep8 will not bet used
        - PyLint does *NOT* support lint buffers that are not already saved in
          the file system

        **** WARNING ****
    */
    "use_pylint": false,

    // Set this to false to turn pep8 checking off completely
    "pep8": true,

    /*
        If setted, the given file will be used as configuration for pep8

        **** WARNING ****

        - If this option is set to something different than false,
          pep8_ignore and pep8_max_line_length will be silently ignored

        **** WARNING ****
    */
    "pep8_rcfile": false,

    /*
        A list of pep8 error numbers to ignore.
        The list of error codes is in this file: https://github.com/jcrocholl/pep8/blob/master/pep8.py.
        Search for "Ennn:", where nnn is a 3-digit number.
    */
    "pep8_ignore":
    [
    ],

    // Maximum line length for pep8
    "pep8_max_line_length": 79,

    // Set this to true to turn pep257 checking on
    "pep257": false,

    /*
        A list of pep257 error numbers to ignore.
        The list can be found here: https://github.com/GreenSteam/pep257/#error-codes
        D209 Multi-line docstring should end with 1 blank line is ignored by
        default as it has been deprecated.
    */
    "pep257_ignore":
    [
        "D209"
    ],

    /*
        You can ignore some of the "undefined name xxx"
        errors (comes in handy if you work with post-processors, globals/builtins available only at runtime, etc.).
        You can control what names will be ignored with the user setting "pyflakes_ignore".

        Example:

        "pyflakes_ignore":
            [
                "some_custom_builtin_o_mine",
                "A_GLOBAL_CONSTANT"
            ],
    */
    "pyflakes_ignore":
    [
    ],

    /*
        Now is possible to ignore specific error types adding them on this
        list, (just uncomment them)
    */
    "pyflakes_explicit_ignore":
    [
        // "Redefined",
        // "UnusedImport",
        // "UndefinedName",
        // "UndefinedLocal",
        // "UnusedVariable,",
        // "UndefinedExport",
        // "DuplicateArgument",
        // "RedefinedWhileUnused"
    ],

    /*
        If setted, the given file will be used as configuration for PyLint

        **** WARNING ****

            - If this option is set to something different than false,
              pylint_ignore will be silently ignored

            **** WARNING ****
    */
    "pylint_rcfile": false,

    /*
        You can ignore specific PyLint error codes using this configuration.
        We strongly suggest that you better configure your pylintrc file to
        determine which type of error is important to you
    */
    "pylint_ignore":
    [
        // "0201"
    ],

    /*
        Ordinarily pyflakes will issue a warning when 'from foo import *' is used,
        but it is ignored since the warning is not that helpful. If you want to see this warning,
        set this option to false.
    */
    "pyflakes_ignore_import_*": true,

    /*
        Debug and development options

        Use those options only for debugging and devleopment purposes, them can
        and will slowdown your Sublime Text

        anconda_debug can be set as: false or profiler

        If this is set as profiler, Aanconda will run a profiler on autocompelte
        and print it results in the Sublime Text console.

        NOTE: cProfile can't be imported in all the platforms, at least no in
        Linux, this is an already reported bug:

            http://www.sublimetext.com/forum/viewtopic.php?f=3&t=13698
            https://github.com/SublimeText/Issues/issues/127

    */
    "anaconda_debug": false
}
